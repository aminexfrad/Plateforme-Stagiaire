#!/usr/bin/env python3
"""
¬© 2025 Mohamed Amine FRAD. All rights reserved.
Unauthorized use, reproduction, or modification of this code is strictly prohibited.
Intellectual Property ‚Äì Protected by international copyright law.

Test script for testimonial moderation workflow
"""

import os
import sys
import django
from django.utils import timezone
from datetime import timedelta

# Add the project root to the Python path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Setup Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'gateway.stagebloom.settings')
django.setup()

from auth_service.models import User
from shared.models import Stage, Testimonial, Notification
from shared.utils import MailService

def test_testimonial_workflow():
    """
    Test the complete testimonial moderation workflow
    """
    print("üß™ Testing Testimonial Moderation Workflow")
    print("=" * 50)
    
    try:
        # 1. Create test users
        print("\n1. Creating test users...")
        
        # Create RH user
        rh_user, created = User.objects.get_or_create(
            email='rh@test.com',
            defaults={
                'nom': 'Test',
                'prenom': 'RH',
                'role': 'rh',
                'is_active': True
            }
        )
        print(f"‚úÖ RH user: {rh_user.get_full_name()}")
        
        # Create stagiaire user
        stagiaire_user, created = User.objects.get_or_create(
            email='stagiaire@test.com',
            defaults={
                'nom': 'Test',
                'prenom': 'Stagiaire',
                'role': 'stagiaire',
                'is_active': True,
                'institut': 'ISET Sousse',
                'specialite': 'G√©nie Informatique'
            }
        )
        print(f"‚úÖ Stagiaire user: {stagiaire_user.get_full_name()}")
        
        # 2. Create test stage
        print("\n2. Creating test stage...")
        stage, created = Stage.objects.get_or_create(
            title='Stage Test',
            defaults={
                'company': 'Rose Blanche',
                'location': 'Sousse',
                'description': 'Stage de test pour t√©moignages',
                'start_date': timezone.now().date(),
                'end_date': (timezone.now() + timedelta(days=90)).date(),
                'status': 'completed',
                'stagiaire': stagiaire_user
            }
        )
        print(f"‚úÖ Stage: {stage.title}")
        
        # 3. Create testimonial
        print("\n3. Creating testimonial...")
        testimonial = Testimonial.objects.create(
            stage=stage,
            author=stagiaire_user,
            title='Mon exp√©rience de stage',
            content='Ce stage a √©t√© une exp√©rience tr√®s enrichissante. J\'ai pu d√©velopper mes comp√©tences techniques et d√©couvrir le monde professionnel. L\'√©quipe √©tait tr√®s accueillante et j\'ai pu travailler sur des projets passionnants.',
            testimonial_type='text',
            status='pending'
        )
        print(f"‚úÖ Testimonial created: {testimonial.title}")
        
        # 4. Check notifications
        print("\n4. Checking notifications...")
        rh_notifications = Notification.objects.filter(
            recipient=rh_user,
            title__icontains='t√©moignage'
        )
        print(f"‚úÖ RH notifications: {rh_notifications.count()}")
        
        # 5. Simulate approval
        print("\n5. Simulating approval...")
        testimonial.status = 'approved'
        testimonial.moderated_by = rh_user
        testimonial.moderated_at = timezone.now()
        testimonial.moderation_comment = 'Excellent t√©moignage, tr√®s bien √©crit !'
        testimonial.save()
        
        # Create approval notification
        Notification.objects.create(
            recipient=stagiaire_user,
            title='T√©moignage approuv√©',
            message=f'Votre t√©moignage "{testimonial.title}" a √©t√© approuv√© et publi√© sur la plateforme.',
            notification_type='success',
            related_stage=stage
        )
        print(f"‚úÖ Testimonial approved")
        
        # 6. Check approval notification
        stagiaire_notifications = Notification.objects.filter(
            recipient=stagiaire_user,
            title__icontains='approuv√©'
        )
        print(f"‚úÖ Stagiaire approval notifications: {stagiaire_notifications.count()}")
        
        # 7. Test rejection workflow
        print("\n7. Testing rejection workflow...")
        testimonial2 = Testimonial.objects.create(
            stage=stage,
            author=stagiaire_user,
            title='T√©moignage √† modifier',
            content='Ce t√©moignage contient des informations qui n√©cessitent des modifications.',
            testimonial_type='text',
            status='rejected'
        )
        
        testimonial2.moderated_by = rh_user
        testimonial2.moderated_at = timezone.now()
        testimonial2.moderation_comment = 'Veuillez modifier le contenu pour respecter nos guidelines.'
        testimonial2.save()
        
        # Create rejection notification
        Notification.objects.create(
            recipient=stagiaire_user,
            title='T√©moignage n√©cessite des modifications',
            message=f'Votre t√©moignage "{testimonial2.title}" n√©cessite des modifications. Commentaire: {testimonial2.moderation_comment}',
            notification_type='warning',
            related_stage=stage
        )
        print(f"‚úÖ Testimonial rejected")
        
        # 8. Test public testimonials
        print("\n8. Testing public testimonials...")
        public_testimonials = Testimonial.objects.filter(status='approved')
        print(f"‚úÖ Public testimonials: {public_testimonials.count()}")
        
        # 9. Statistics
        print("\n9. Workflow statistics...")
        total_testimonials = Testimonial.objects.count()
        pending_testimonials = Testimonial.objects.filter(status='pending').count()
        approved_testimonials = Testimonial.objects.filter(status='approved').count()
        rejected_testimonials = Testimonial.objects.filter(status='rejected').count()
        
        print(f"üìä Total testimonials: {total_testimonials}")
        print(f"üìä Pending: {pending_testimonials}")
        print(f"üìä Approved: {approved_testimonials}")
        print(f"üìä Rejected: {rejected_testimonials}")
        
        # 10. Test email notifications (if configured)
        print("\n10. Testing email notifications...")
        try:
            # Test RH notification
            MailService.send_testimonial_submission_notification(testimonial)
            print("‚úÖ RH notification email sent")
            
            # Test approval notification
            MailService.send_testimonial_approval_notification(testimonial)
            print("‚úÖ Approval notification email sent")
            
            # Test rejection notification
            MailService.send_testimonial_rejection_notification(testimonial2)
            print("‚úÖ Rejection notification email sent")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Email notifications test failed (expected if not configured): {str(e)}")
        
        print("\nüéâ Testimonial moderation workflow test completed successfully!")
        print("\nüìã Summary:")
        print("- ‚úÖ Test users created")
        print("- ‚úÖ Test stage created")
        print("- ‚úÖ Testimonials created")
        print("- ‚úÖ Notifications generated")
        print("- ‚úÖ Approval workflow tested")
        print("- ‚úÖ Rejection workflow tested")
        print("- ‚úÖ Public testimonials accessible")
        print("- ‚úÖ Email notifications tested")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error during testing: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_testimonial_workflow()
    sys.exit(0 if success else 1) 