#!/usr/bin/env python
"""
Test de l'affichage des rapports archiv√©s
"""

import os
import sys
import django
import requests

# Setup Django
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'gateway.stagebloom.settings')
django.setup()

from shared.models import PFEReport
from auth_service.models import User

def test_archived_reports():
    print("üì¶ Test de l'affichage des rapports archiv√©s...")
    
    # Test 1: V√©rifier les rapports archiv√©s dans la base de donn√©es
    print("\n1Ô∏è‚É£ V√©rification des rapports archiv√©s dans la base de donn√©es...")
    archived_reports = PFEReport.objects.filter(status='archived')
    print(f"   ‚úÖ {archived_reports.count()} rapport(s) archiv√©(s) trouv√©(s)")
    
    for report in archived_reports:
        print(f"   - {report.title} (ID: {report.id}) - {report.stagiaire.get_full_name()}")
    
    # Test 2: V√©rifier l'API pour RH
    print("\n2Ô∏è‚É£ Test de l'API pour RH...")
    base_url = "http://localhost:8000/api"
    
    try:
        # Login RH
        login_response = requests.post(f"{base_url}/auth/login/", json={
            'email': 'rh.complet@example.com',
            'password': 'test1234'
        })
        
        if login_response.status_code == 200:
            token = login_response.json().get('access')
            headers = {'Authorization': f'Bearer {token}'}
            
            # R√©cup√©rer les rapports PFE
            reports_response = requests.get(f"{base_url}/pfe-reports/", headers=headers)
            
            if reports_response.status_code == 200:
                reports_data = reports_response.json()
                reports = reports_data.get('results', [])
                
                print(f"   ‚úÖ {len(reports)} rapport(s) trouv√©(s) pour RH")
                
                # Compter les rapports archiv√©s
                archived_count = sum(1 for r in reports if r.get('status') == 'archived')
                approved_count = sum(1 for r in reports if r.get('status') == 'approved')
                
                print(f"   üìä R√©partition:")
                print(f"      - Approuv√©s: {approved_count}")
                print(f"      - Archiv√©s: {archived_count}")
                
                # Afficher les rapports archiv√©s
                archived_reports_api = [r for r in reports if r.get('status') == 'archived']
                if archived_reports_api:
                    print(f"   üì¶ Rapports archiv√©s visibles pour RH:")
                    for report in archived_reports_api:
                        print(f"      - {report.get('title')} (ID: {report.get('id')})")
            else:
                print(f"   ‚ùå Erreur API: {reports_response.status_code}")
        else:
            print(f"   ‚ùå Login failed: {login_response.status_code}")
    
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
    
    # Test 3: V√©rifier l'admin Django
    print("\n3Ô∏è‚É£ Test de l'admin Django...")
    print("   üìã Pour v√©rifier l'admin Django:")
    print("      1. Allez sur http://localhost:8000/admin/")
    print("      2. Connectez-vous avec admin/admin")
    print("      3. Cliquez sur 'PFE Reports'")
    print("      4. V√©rifiez que les rapports archiv√©s sont visibles")
    
    print("\n‚úÖ Test termin√© !")

if __name__ == "__main__":
    test_archived_reports() 