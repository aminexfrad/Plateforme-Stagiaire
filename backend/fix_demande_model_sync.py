#!/usr/bin/env python3
"""
Script pour synchroniser le mod√®le Demande avec la base de donn√©es
Corrige les incoh√©rences de noms de champs
"""

import os
import sys
import django
from django.db import connection

# Setup Django
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'gateway.stagebloom.settings')
django.setup()

from demande_service.models import Demande

def fix_demande_model_sync():
    """Synchroniser le mod√®le Demande avec la base de donn√©es"""
    
    print("üîß Synchronisation du mod√®le Demande avec la base de donn√©es")
    print("=" * 70)
    
    # 1. Analyser la situation actuelle
    print("\nüìã Situation actuelle:")
    
    with connection.cursor() as cursor:
        cursor.execute("DESCRIBE demande_stage")
        columns = cursor.fetchall()
        db_fields = {col[0]: col[1] for col in columns}
    
    print(f"   Champs en base de donn√©es: {len(db_fields)}")
    print(f"   Champs dans le mod√®le Django: {len(Demande._meta.get_fields())}")
    
    # 2. Identifier les probl√®mes sp√©cifiques
    print(f"\nüîç Probl√®mes identifi√©s:")
    
    # Probl√®me principal: date_modification vs updated_at
    if 'date_modification' in db_fields and 'updated_at' in db_fields:
        print(f"   ‚ùå Conflit: 'date_modification' et 'updated_at' existent tous les deux")
    elif 'date_modification' in db_fields:
        print(f"   ‚ö†Ô∏è La base a 'date_modification' mais le mod√®le a 'updated_at'")
    elif 'updated_at' in db_fields:
        print(f"   ‚ö†Ô∏è La base a 'updated_at' mais le mod√®le a 'updated_at'")
    
    # Probl√®me: date_soumission est datetime en base mais DateField en mod√®le
    if 'date_soumission' in db_fields:
        db_type = db_fields['date_soumission']
        if 'datetime' in db_type:
            print(f"   ‚ö†Ô∏è 'date_soumission' est datetime en base mais DateField en mod√®le")
    
    # 3. Solutions propos√©es
    print(f"\nüí° Solutions propos√©es:")
    
    # Option 1: Modifier la base de donn√©es pour correspondre au mod√®le
    print(f"   üîß Option 1: Modifier la base de donn√©es")
    print(f"      - Renommer 'date_modification' en 'updated_at'")
    print(f"      - Modifier 'date_soumission' de datetime √† date")
    print(f"      - Ajouter les champs manquants du mod√®le")
    
    # Option 2: Modifier le mod√®le pour correspondre √† la base
    print(f"   üîß Option 2: Modifier le mod√®le Django")
    print(f"      - Renommer 'updated_at' en 'date_modification'")
    print(f"      - Modifier 'date_soumission' de DateField √† DateTimeField")
    print(f"      - Adapter les autres champs")
    
    # 4. Recommandation
    print(f"\nüéØ Recommandation:")
    print(f"   Option 1 (modifier la base) est pr√©f√©rable car:")
    print(f"   - Le mod√®le Django suit les conventions standard")
    print(f"   - Les noms de champs sont plus clairs")
    print(f"   - Coh√©rence avec le reste du syst√®me")
    
    # 5. V√©rifier si on peut ex√©cuter la correction
    print(f"\nüîí V√©rification de la s√©curit√©:")
    
    # V√©rifier s'il y a des donn√©es existantes
    with connection.cursor() as cursor:
        cursor.execute("SELECT COUNT(*) FROM demande_stage")
        count = cursor.fetchone()[0]
    
    if count > 0:
        print(f"   ‚ö†Ô∏è ATTENTION: {count} demandes existent en base")
        print(f"   üîç Sauvegarde recommand√©e avant modification")
    else:
        print(f"   ‚úÖ Aucune donn√©e existante - modification s√ªre")
    
    # 6. Proposer la correction
    print(f"\nüöÄ Correction propos√©e:")
    
    if count == 0:
        print(f"   ‚úÖ Ex√©cution automatique possible (base vide)")
        
        # Cr√©er la table avec la bonne structure
        print(f"   üîß Recr√©ation de la table avec la bonne structure...")
        
        try:
            with connection.cursor() as cursor:
                # Supprimer la table existante
                cursor.execute("DROP TABLE IF EXISTS demande_stage")
                print(f"   ‚úÖ Table supprim√©e")
                
                # Cr√©er la table avec la bonne structure
                create_table_sql = """
                CREATE TABLE demande_stage (
                    id BIGINT AUTO_INCREMENT PRIMARY KEY,
                    nom VARCHAR(100) NOT NULL,
                    prenom VARCHAR(100) NOT NULL,
                    email VARCHAR(254) NOT NULL,
                    telephone VARCHAR(20) NOT NULL,
                    institut VARCHAR(200) NOT NULL,
                    specialite VARCHAR(200) NOT NULL,
                    type_stage VARCHAR(50) NOT NULL,
                    niveau VARCHAR(100) NOT NULL,
                    pfe_reference VARCHAR(200) NOT NULL,
                    date_debut DATE NOT NULL,
                    date_fin DATE NOT NULL,
                    stage_binome BOOLEAN NOT NULL,
                    nom_binome VARCHAR(100) NOT NULL,
                    prenom_binome VARCHAR(100) NOT NULL,
                    email_binome VARCHAR(254) NOT NULL,
                    telephone_binome VARCHAR(20) NOT NULL,
                    cv VARCHAR(100),
                    lettre_motivation VARCHAR(100),
                    demande_stage VARCHAR(100),
                    cv_binome VARCHAR(100),
                    lettre_motivation_binome VARCHAR(100),
                    demande_stage_binome VARCHAR(100),
                    status VARCHAR(20) NOT NULL,
                    raison_refus TEXT NOT NULL,
                    user_created_id BIGINT,
                    entreprise_id BIGINT,
                    created_at DATETIME(6) NOT NULL,
                    updated_at DATETIME(6) NOT NULL,
                    date_soumission DATE NOT NULL,
                    INDEX idx_email (email(100)),
                    INDEX idx_status (status),
                    INDEX idx_created_at (created_at)
                )
                """
                cursor.execute(create_table_sql)
                print(f"   ‚úÖ Table recr√©√©e avec la bonne structure")
                
                # V√©rifier la structure
                cursor.execute("DESCRIBE demande_stage")
                new_columns = cursor.fetchall()
                print(f"   üìã Nouvelle structure:")
                for col in new_columns:
                    print(f"     - {col[0]}: {col[1]}")
                
        except Exception as e:
            print(f"   ‚ùå Erreur lors de la correction: {e}")
            return False
            
    else:
        print(f"   ‚ö†Ô∏è Correction manuelle requise (donn√©es existantes)")
        print(f"   üìã Script SQL √† ex√©cuter:")
        print(f"   ALTER TABLE demande_stage CHANGE date_modification updated_at DATETIME(6) NOT NULL;")
        print(f"   ALTER TABLE demande_stage MODIFY date_soumission DATE NOT NULL;")
    
    # 7. Test de validation
    print(f"\nüß™ Test de validation...")
    
    try:
        # Essayer de cr√©er une instance
        demande = Demande()
        demande.save()
        print(f"   ‚úÖ Instance cr√©√©e avec succ√®s (ID: {demande.id})")
        
        # Supprimer l'instance de test
        demande.delete()
        print(f"   ‚úÖ Instance de test supprim√©e")
        
        print(f"   üéâ Synchronisation r√©ussie!")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur lors du test: {e}")
        return False

if __name__ == '__main__':
    success = fix_demande_model_sync()
    if success:
        print(f"\n‚úÖ Le mod√®le Demande est maintenant synchronis√© avec la base!")
        print(f"üöÄ Les demandes de stage peuvent √™tre cr√©√©es sans erreur")
    else:
        print(f"\n‚ùå La synchronisation a √©chou√©")
        print(f"üîç V√©rifiez les erreurs ci-dessus")
