#!/usr/bin/env python3
"""
Script pour diagnostiquer le syst√®me de notifications
et identifier pourquoi les demandes ne sont pas re√ßues
"""

import os
import sys
import django

# Setup Django
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'gateway.stagebloom.settings')
django.setup()

from notification_service.models import NotificationEvent
from demande_service.models import Demande
from shared.models import Entreprise, OffreStage
from auth_service.models import User

def debug_notification_system():
    """Diagnostic du syst√®me de notifications"""
    
    print("üîç Diagnostic du syst√®me de notifications")
    print("=" * 60)
    
    # 1. V√©rifier l'√©tat des notifications
    print("\nüìã √âtat des notifications:")
    
    try:
        notifications_count = NotificationEvent.objects.count()
        print(f"   - Nombre total d'√©v√©nements de notification: {notifications_count}")
        
        if notifications_count > 0:
            # Afficher les derni√®res notifications
            latest_notifications = NotificationEvent.objects.order_by('-created_at')[:5]
            print(f"   - 5 derniers √©v√©nements de notification:")
            for notif in latest_notifications:
                print(f"     * {notif.event_type} - {notif.processed} - {notif.created_at}")
        else:
            print(f"   ‚ö†Ô∏è Aucun √©v√©nement de notification trouv√©")
            
    except Exception as e:
        print(f"   ‚ùå Erreur lors de la v√©rification des notifications: {e}")
    
    # 2. V√©rifier les demandes de stage
    print(f"\nüìù √âtat des demandes de stage:")
    
    try:
        demandes_count = Demande.objects.count()
        print(f"   - Nombre total de demandes: {demandes_count}")
        
        if demandes_count > 0:
            # Afficher les derni√®res demandes
            latest_demandes = Demande.objects.order_by('-created_at')[:5]
            print(f"   - 5 derni√®res demandes:")
            for demande in latest_demandes:
                print(f"     * {demande.prenom} {demande.nom} - {demande.email} - {demande.status} - {demande.created_at}")
        else:
            print(f"   ‚ö†Ô∏è Aucune demande trouv√©e")
            
    except Exception as e:
        print(f"   ‚ùå Erreur lors de la v√©rification des demandes: {e}")
    
    # 3. V√©rifier les entreprises et offres
    print(f"\nüè¢ √âtat des entreprises et offres:")
    
    try:
        entreprises_count = Entreprise.objects.count()
        print(f"   - Nombre d'entreprises: {entreprises_count}")
        
        offres_count = OffreStage.objects.count()
        print(f"   - Nombre d'offres de stage: {offres_count}")
        
        if entreprises_count > 0:
            entreprises = Entreprise.objects.all()[:3]
            print(f"   - Exemples d'entreprises:")
            for entreprise in entreprises:
                print(f"     * {entreprise.nom} - {entreprise.secteur_activite}")
                
    except Exception as e:
        print(f"   ‚ùå Erreur lors de la v√©rification des entreprises: {e}")
    
    # 4. V√©rifier les utilisateurs RH
    print(f"\nüë• Utilisateurs RH:")
    
    try:
        rh_users = User.objects.filter(role='rh')
        rh_count = rh_users.count()
        print(f"   - Nombre d'utilisateurs RH: {rh_count}")
        
        if rh_count > 0:
            print(f"   - Utilisateurs RH:")
            for user in rh_users:
                entreprise_nom = user.entreprise.nom if user.entreprise else "Aucune"
                print(f"     * {user.email} - {user.first_name} {user.last_name} - Entreprise: {entreprise_nom}")
        else:
            print(f"   ‚ö†Ô∏è Aucun utilisateur RH trouv√©")
            
    except Exception as e:
        print(f"   ‚ùå Erreur lors de la v√©rification des utilisateurs RH: {e}")
    
    # 5. V√©rifier la configuration des notifications
    print(f"\n‚öôÔ∏è Configuration des notifications:")
    
    try:
        # V√©rifier si les signaux sont configur√©s
        from notification_service import signals
        print(f"   ‚úÖ Module de signaux disponible")
        
        # V√©rifier les services de notification
        from notification_service import services
        print(f"   ‚úÖ Module de services disponible")
        
    except Exception as e:
        print(f"   ‚ùå Erreur dans la configuration des notifications: {e}")
    
    # 6. Test de cr√©ation de notification
    print(f"\nüß™ Test de cr√©ation de notification...")
    
    try:
        # Cr√©er une notification de test
        test_notification = NotificationEvent.objects.create(
            event_type="test",
            event_data={"message": "Ceci est un test du syst√®me de notifications"},
            processed=False
        )
        print(f"   ‚úÖ √âv√©nement de notification de test cr√©√© (ID: {test_notification.id})")
        
        # Supprimer la notification de test
        test_notification.delete()
        print(f"   ‚úÖ √âv√©nement de notification de test supprim√©")
        
    except Exception as e:
        print(f"   ‚ùå Erreur lors de la cr√©ation de notification de test: {e}")
    
    # 7. V√©rifier les signaux de demande
    print(f"\nüîî V√©rification des signaux de demande:")
    
    try:
        # V√©rifier si le signal de cr√©ation de demande est connect√©
        from django.db.models.signals import post_save
        from notification_service.signals import create_demande_notification
        
        # Lister les signaux connect√©s
        print(f"   - Signaux post_save connect√©s:")
        for receiver in post_save._live_receivers:
            if 'demande' in str(receiver).lower():
                print(f"     * {receiver}")
        
    except Exception as e:
        print(f"   ‚ùå Erreur lors de la v√©rification des signaux: {e}")
    
    # 8. Recommandations
    print(f"\nüí° Recommandations:")
    
    if notifications_count == 0:
        print(f"   üîß Aucun √©v√©nement de notification - V√©rifier la configuration des signaux")
        print(f"   üìß V√©rifier que les signaux sont bien connect√©s aux mod√®les")
        
    if demandes_count == 0:
        print(f"   üîß Aucune demande - Le probl√®me peut √™tre dans la cr√©ation des demandes")
        
    print(f"   üîç V√©rifier les logs Django pour les erreurs de notification")
    print(f"   üì± V√©rifier que le frontend √©coute bien les notifications")
    
    return notifications_count > 0 and demandes_count > 0

if __name__ == '__main__':
    success = debug_notification_system()
    if success:
        print(f"\n‚úÖ Le syst√®me de notifications semble fonctionnel")
    else:
        print(f"\n‚ùå Probl√®mes d√©tect√©s dans le syst√®me de notifications")
