# Diagnostic de la validation des noms
Write-Host "üîç Diagnostic de la validation des noms" -ForegroundColor Cyan
Write-Host "=" * 50 -ForegroundColor Cyan

# Aller dans le dossier backend
Set-Location backend

# V√©rifier que Python est disponible
try {
    $pythonVersion = python --version 2>&1
    Write-Host "‚úÖ Python d√©tect√©: $pythonVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Python n'est pas install√© ou n'est pas dans le PATH" -ForegroundColor Red
    exit 1
}

# V√©rifier que Django est install√©
try {
    python -c "import django; print('Django version:', django.get_version())" 2>&1
    Write-Host "‚úÖ Django est install√©" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Django n'est pas install√©" -ForegroundColor Red
    Write-Host "Installez les d√©pendances avec: pip install -r requirements.txt" -ForegroundColor Yellow
    exit 1
}

# Lancer le diagnostic
Write-Host "`nüöÄ Lancement du diagnostic de validation des noms..." -ForegroundColor Yellow
python debug_name_validation.py

# V√©rifier le code de sortie
if ($LASTEXITCODE -eq 0) {
    Write-Host "`n‚úÖ Diagnostic termin√© avec succ√®s!" -ForegroundColor Green
} else {
    Write-Host "`n‚ùå Diagnostic √©chou√© avec le code: $LASTEXITCODE" -ForegroundColor Red
}

# Retourner au dossier racine
Set-Location ..

Write-Host "`nüìã Ce diagnostic va:" -ForegroundColor Cyan
Write-Host "- Tester le pattern actuel de validation des noms" -ForegroundColor White
Write-Host "- Identifier les noms qui sont rejet√©s" -ForegroundColor White
Write-Host "- Proposer un pattern am√©lior√©" -ForegroundColor White
Write-Host "- Tester l'am√©lioration propos√©e" -ForegroundColor White

Write-Host "`nüîß Probl√®me identifi√©:" -ForegroundColor Yellow
Write-Host "L'erreur 'Format de nom invalide' indique que le SecurityValidator" -ForegroundColor White
Write-Host "rejette des noms valides √† cause d'un pattern regex trop restrictif" -ForegroundColor White
